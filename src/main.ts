import {
  app,
  BrowserWindow,
  clipboard,
  dialog,
  ipcMain,
  net,
  protocol,
  session,
  shell,
} from 'electron'
import path from 'path'
import isDev from 'electron-is-dev'
import log from 'electron-log/main'

import './index.css'
import { CHANNELS, GameInstall, LAUNCH_CHANNEL } from './constants'
import { AuthProvider } from './msal/AuthProvider'
import { newStore, removeGameInstall, updateGameInstall } from './store'
import {
  findGameLogFiles,
  newGameLogContext,
  readGameLogs,
  resetGameLogContext,
} from './utils/gamelog'
import { launchInstall, setupInstall } from './utils/launcher'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

const clipboardPollInterval = 500
const authProvider = new AuthProvider()
const gameLogContext = newGameLogContext()
const store = newStore()

let mainWindow: BrowserWindow | undefined
let lastText = clipboard.readText()

log.initialize()
log.info('Started EmpireUtils')

const clipboardPollHandle = setInterval(() => {
  const text = clipboard.readText()
  if (text === lastText || !mainWindow) return
  console.log('Clipboard text changed:', text)
  lastText = text
  mainWindow.webContents.send(CHANNELS.clipboardTextUpdated, text)
}, clipboardPollInterval)

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    icon: path.join(process.cwd(), 'images', 'icon.png'),
    height: 720,
    width: 960,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  if (isDev) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools()
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-eval'; connect-src 'self' https://launchermeta.mojang.com https://meta.fabricmc.net; img-src 'self' http: https: app-file:; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline';",
        ],
      },
    })
  })
  protocol.handle('app-file', async (request) =>
    net.fetch(request.url.replace(`app-file://`, `file://${app.getAppPath()}/`))
  )
  ipcMain.handle(CHANNELS.electronStoreGet, (_event, key: string) =>
    store.get(key)
  )
  ipcMain.on(
    CHANNELS.electronStoreSet,
    (_event, key: string, value: unknown) => {
      store.set(key, value)
    }
  )
  ipcMain.handle(
    CHANNELS.createGameInstall,
    async (_event, gameInstall: GameInstall) => {
      await setupInstall(gameInstall)
      updateGameInstall(store, gameInstall)
      return gameInstall
    }
  )
  ipcMain.handle(
    CHANNELS.deleteGameInstall,
    async (_event, gameInstall: GameInstall) => {
      removeGameInstall(store, gameInstall)
      return true
    }
  )
  ipcMain.handle(
    CHANNELS.launchGameInstall,
    async (_event, launchId: string, gameInstall: GameInstall) => {
      const channel = LAUNCH_CHANNEL(launchId)
      launchInstall(launchId, gameInstall, authProvider, store, (update) => {
        mainWindow?.webContents.send(channel, update)
      }).catch((error) => log.error('launchGameInstall error', error))
      return true
    }
  )
  ipcMain.on(CHANNELS.openBrowserWindow, (_event, url: string) =>
    shell.openExternal(url)
  )
  ipcMain.handle(CHANNELS.openFileDialog, (_event, defaultPath: string) =>
    dialog
      .showOpenDialog({ defaultPath, properties: ['openFile'] })
      .then((x) => x.filePaths[0])
  )
  ipcMain.handle(
    CHANNELS.getLogfilePath,
    () => log.transports.file.getFile().path
  )
  ipcMain.handle(
    CHANNELS.readGameLogs,
    async (
      _event,
      gameLogDirectories: string[],
      startDate?: Date,
      endDate?: Date
    ) => {
      const logFiles = await findGameLogFiles(
        gameLogDirectories,
        startDate,
        endDate
      )
      readGameLogs(gameLogContext, logFiles, (lines) => {
        mainWindow?.webContents.send(CHANNELS.readGameLogs, lines)
      }).catch((error) => log.error('readGameLogChannel error', error))
      return logFiles
    }
  )
  createWindow()
})

// Quit when all windows are closed
app.on('window-all-closed', () => {
  app.quit()
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

app.on('will-quit', () => {
  clearInterval(clipboardPollHandle)
  resetGameLogContext(gameLogContext)
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

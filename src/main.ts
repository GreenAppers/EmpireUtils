import {
  app,
  BrowserWindow,
  clipboard,
  ipcMain,
  session,
  shell,
} from 'electron'
import fs from 'fs'
import path from 'path'
import isDev from 'electron-is-dev'
import log from 'electron-log/main'
import { Tail } from 'tail'

import './index.css'
import {
  clipboardTextUpdatedChannel,
  closeTailGameLogChannel,
  findGameLogChannel,
  getLogfilePathChannel,
  openBrowserWindowChannel,
  openTailGameLogChannel,
  tailGameLogChannel,
} from './constants'
import type { GameLog } from './types'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

const clipboardPollInterval = 500

const gameLogDirectories = [
  `${process.env.HOME}/Library/Application Support/minecraft/logs`,
  `${process.env.HOME}/.lunarclient/logs/game`,
].filter((path) => {
  try {
    return fs.statSync(path).isDirectory()
  } catch {
    return false
  }
})

const tailGameLog: Record<string, Tail> = {}

let mainWindow: BrowserWindow | undefined
let lastText = clipboard.readText()

log.initialize()
log.info('Started EmpireUtils')

const clipboardPollHandle = setInterval(() => {
  const text = clipboard.readText()
  if (text === lastText || !mainWindow) return
  console.log('Clipboard text changed:', text)
  lastText = text
  mainWindow.webContents.send(clipboardTextUpdatedChannel, text)
}, clipboardPollInterval)

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    icon: path.join(process.cwd(), 'images', 'icon.png'),
    height: 720,
    width: 960,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  if (isDev) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools()
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-eval'; img-src 'self' https:; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline';",
        ],
      },
    })
  })
  ipcMain.handle(
    getLogfilePathChannel,
    () => log.transports.file.getFile().path
  )
  ipcMain.handle(findGameLogChannel, () => {
    const logFiles = gameLogDirectories.flatMap((dir) => {
      try {
        return fs
          .readdirSync(dir)
          .filter((file) => file.endsWith('.log'))
          .map((file) => path.join(dir, file))
      } catch {
        return []
      }
    })
    const logFilesWithMtime: GameLog[] = logFiles.map((path) => ({
      path,
      mtimeMs: fs.statSync(path).mtimeMs,
    }))
    logFilesWithMtime.sort((a, b) => b.mtimeMs - a.mtimeMs)
    return logFilesWithMtime
  })
  ipcMain.handle(openTailGameLogChannel, (_event, path: string) => {
    if (tailGameLog[path]) return
    tailGameLog[path] = new Tail(path, { follow: true, fromBeginning: true })
    tailGameLog[path].on('line', (line) => {
      mainWindow?.webContents.send(tailGameLogChannel(path), line)
    })
    tailGameLog[path].on('error', (error) => {
      log.error(`Error tailing ${path}`, error)
    })
  })
  ipcMain.handle(closeTailGameLogChannel, (_event, path: string) => {
    if (!tailGameLog[path]) return
    tailGameLog[path].unwatch()
    delete tailGameLog[path]
  })
  ipcMain.on(openBrowserWindowChannel, (_event, url: string) =>
    shell.openExternal(url)
  )
  createWindow()
})

// Quit when all windows are closed
app.on('window-all-closed', () => {
  app.quit()
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

app.on('will-quit', () => {
  clearInterval(clipboardPollHandle)
  for (const path in tailGameLog) {
    tailGameLog[path].unwatch()
    delete tailGameLog[path]
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
